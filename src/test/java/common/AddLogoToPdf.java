package common;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfCopy;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import org.apache.pdfbox.pdmodel.PDPageTree;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class AddLogoToPdf {
	private static String path = System.getProperty("user.dir");
	public static String projectName = CommonUtil
			.GetXMLData(Paths.get(path, "src", "test", "java", "ApplicationSettings.xml").toString(), "ProjectName");
	public static String UserName = CommonUtil
			.GetXMLData(Paths.get(path, "src", "test", "java", "ApplicationSettings.xml").toString(), "UserName");
	public static Path reportPath = null;

	public static void addLogoToPdf() {
		String projectPath = System.getProperty("user.dir");
		String latestfoldername = common.LatestFolderFinder.GetLatestFolderName(projectPath + "/output");
		Path pdfFilePath = Paths.get(projectPath, "output", latestfoldername, "ExtentReports", "PdfReport",
				"Extent.pdf");
		Path leftLogoFilePath = Paths.get(projectPath, "src", "test", "resources", "logo1.png");
		Path rightLogoFilePath = Paths.get(projectPath, "src", "test", "resources", "logo2.png");
		Path outputFilePath = Paths.get(projectPath, "output", latestfoldername, "ExtentReports", "PdfReport",
				"Extent.pdf");
		Path htmlFilePath = CustomReportGenerator.htmlfile; // Replace with the actual path to your HTML file
		reportPath = outputFilePath;

		try {
			// Check if logo files exist
			if (!Files.exists(leftLogoFilePath)) {
				throw new IOException("Left logo file does not exist: " + leftLogoFilePath.toString());
			}
			if (!Files.exists(rightLogoFilePath)) {
				throw new IOException("Right logo file does not exist: " + rightLogoFilePath.toString());
			}

			try (PDDocument document = PDDocument.load(new File(pdfFilePath.toString()))) {
				PDRectangle a3Size = new PDRectangle(PDRectangle.A3.getWidth(), PDRectangle.A3.getHeight() / 2);

				// First page for logos and title
				PDPage firstPage = new PDPage(a3Size);
				PDPageTree pages = document.getPages();
				pages.insertBefore(firstPage, pages.get(0));

				// Add logos and text to the first page
				try (PDPageContentStream contentStream = new PDPageContentStream(document, firstPage)) {
					PDImageXObject leftLogo = PDImageXObject.createFromFile(leftLogoFilePath.toString(), document);
					PDImageXObject rightLogo = PDImageXObject.createFromFile(rightLogoFilePath.toString(), document);

					contentStream.drawImage(leftLogo, 40, a3Size.getHeight() - 120, 200, 70);
					contentStream.drawImage(rightLogo, a3Size.getWidth() - 300, a3Size.getHeight() - 120, 250, 70);
					contentStream.setNonStrokingColor(Color.BLACK);

					// Define text content and positioning
					String text1 = "TEST AUTOMATION REPORT";
					String text2 = "For " + projectName;
					String text3 = "Powered by algoQA";
					String text4 = "Report Generated By: " + UserName;
					LocalDate currentDate = LocalDate.now();
					DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMMM-yyyy");
					String text5 = "Report Generated date: " + currentDate.format(formatter);

					PDType1Font font = PDType1Font.HELVETICA_BOLD;

					// Calculate and display the text
					float fontSize = 22;
					float textWidth = font.getStringWidth(text1) / 1000 * fontSize;
					float startX = (a3Size.getWidth() - textWidth) / 2;
					float startY = a3Size.getHeight() - 250;

					contentStream.beginText();
					contentStream.setFont(font, fontSize);
					contentStream.newLineAtOffset(startX, startY);
					contentStream.showText(text1);
					contentStream.endText();

					fontSize = 20;
					textWidth = font.getStringWidth(text2) / 1000 * fontSize;
					startX = (a3Size.getWidth() - textWidth) / 2;
					startY -= 32;

					contentStream.beginText();
					contentStream.setFont(font, fontSize);
					contentStream.newLineAtOffset(startX, startY);
					contentStream.showText(text2);
					contentStream.endText();

					fontSize = 12;
					textWidth = font.getStringWidth(text3) / 1000 * fontSize;
					startX = (a3Size.getWidth() - textWidth) / 2;
					startY -= 22;

					contentStream.beginText();
					contentStream.setFont(font, fontSize);
					contentStream.newLineAtOffset(startX, startY);
					contentStream.showText(text3);
					contentStream.endText();

					fontSize = 18;
					textWidth = font.getStringWidth(text4) / 1000 * fontSize;
					startX = (a3Size.getWidth() - textWidth) / 2;
					startY -= 35;

					contentStream.beginText();
					contentStream.setFont(font, fontSize);
					contentStream.newLineAtOffset(startX, startY);
					contentStream.showText(text4);
					contentStream.endText();

					textWidth = font.getStringWidth(text5) / 1000 * fontSize;
					startX = (a3Size.getWidth() - textWidth) / 2;
					startY -= 35;

					contentStream.beginText();
					contentStream.setFont(font, fontSize);
					contentStream.newLineAtOffset(startX, startY);
					contentStream.showText(text5);
					contentStream.endText();
				}

				// Add the second page with HTML content

				document.save(outputFilePath.toString());
				System.out.println("New pages with content added and file saved as: " + outputFilePath);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void HtmlToPdfConverter() {
		String htmlFilePath = CustomReportGenerator.htmlfile.toString(); // Path to your HTML file
		String pdfFilePath = CustomReportGenerator.pdffile.toString(); // Path to save the PDF file
		String projectPath = System.getProperty("user.dir");
		String latestfoldername = common.LatestFolderFinder.GetLatestFolderName(projectPath + "/output");
		Path outputPdfFile = Paths.get(projectPath, "output", latestfoldername, "ExtentReports", "PdfReport",
				"ExtentPdf.pdf");

		try {
			// Read the existing PDF to determine its page size
			PdfReader existingPdfReader = new PdfReader(outputPdfFile.toString());
			com.itextpdf.text.Rectangle pageSize = existingPdfReader.getPageSize(1);
			existingPdfReader.close();

			// Create a new Document using the size of the existing PDF
			Document document = new Document(pageSize);

			// Initialize PdfWriter
			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(pdfFilePath));
			// Open the document
			document.open();

			// Parse HTML and add to PDF
			XMLWorkerHelper.getInstance().parseXHtml(writer, document, new FileInputStream(htmlFilePath));

			// Close the document
			document.close();

			System.out.println("PDF created successfully.");

			// Merge the created PDF with the existing PDF
			MergePdfExample(pdfFilePath, outputPdfFile.toString());

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void MergePdfExample(String newPdfPath, String existingPdfPath) {
		String tempPdfPath = existingPdfPath; // Temporary file path
		if (tempPdfPath.toLowerCase().contains("ExtentPdf".toLowerCase()))
			tempPdfPath=tempPdfPath.replace("ExtentPdf", "Extent");
		try {
			// Create readers for both PDFs
			PdfReader newPdfReader = new PdfReader(newPdfPath);
			PdfReader existingPdfReader = new PdfReader(existingPdfPath);

			// Create a document for the output PDF, using the size of the existing PDF
			Document document = new Document(existingPdfReader.getPageSizeWithRotation(1));
			PdfCopy copy = new PdfCopy(document, new FileOutputStream(tempPdfPath));

			// Open the document
			document.open();

			// Insert the new PDF's page as the first page in the merged PDF
			PdfImportedPage firstPage = copy.getImportedPage(newPdfReader, 1);
			copy.addPage(firstPage);

			// Copy the rest of the pages from the existing PDF
			for (int i = 1; i <= existingPdfReader.getNumberOfPages(); i++) {
				PdfImportedPage page = copy.getImportedPage(existingPdfReader, i);
				copy.addPage(page);
			}

			// Close the document
			document.close();

			// Close readers
			newPdfReader.close();
			existingPdfReader.close();

			// Replace the original file with the new merged file
			java.nio.file.Files.move(Paths.get(tempPdfPath), Paths.get(existingPdfPath),
					StandardCopyOption.REPLACE_EXISTING);
			System.out.println("PDFs merged successfully.");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}


